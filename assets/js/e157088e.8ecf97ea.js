(self.webpackChunkjarbird_docs=self.webpackChunkjarbird_docs||[]).push([[406],{3905:function(e,a,t){"use strict";t.d(a,{Zo:function(){return p},kt:function(){return c}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=n.createContext({}),s=function(e){var a=n.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=s(e.components);return n.createElement(d.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),c=r,b=m["".concat(d,".").concat(c)]||m[c]||u[c]||i;return t?n.createElement(b,l(l({ref:a},p),{},{components:t})):n.createElement(b,l({ref:a},p))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var d in a)hasOwnProperty.call(a,d)&&(o[d]=a[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8215:function(e,a,t){"use strict";var n=t(7294);a.Z=function(e){var a=e.children,t=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:r},a)}},1395:function(e,a,t){"use strict";t.d(a,{Z:function(){return p}});var n=t(7294),r=t(944),i=t(6010),l="tabItem_1uMI",o="tabItemActive_2DSg";var d=37,s=39;var p=function(e){var a=e.lazy,t=e.block,p=e.defaultValue,u=e.values,m=e.groupId,c=e.className,b=(0,r.Z)(),h=b.tabGroupChoices,f=b.setTabGroupChoices,k=(0,n.useState)(p),g=k[0],v=k[1],y=n.Children.toArray(e.children),N=[];if(null!=m){var C=h[m];null!=C&&C!==g&&u.some((function(e){return e.value===C}))&&v(C)}var w=function(e){var a=e.currentTarget,t=N.indexOf(a),n=u[t].value;v(n),null!=m&&(f(m,n),setTimeout((function(){var e,t,n,r,i,l,d,s;(e=a.getBoundingClientRect(),t=e.top,n=e.left,r=e.bottom,i=e.right,l=window,d=l.innerHeight,s=l.innerWidth,t>=0&&i<=s&&r<=d&&n>=0)||(a.scrollIntoView({block:"center",behavior:"smooth"}),a.classList.add(o),setTimeout((function(){return a.classList.remove(o)}),2e3))}),150))},j=function(e){var a,t;switch(e.keyCode){case s:var n=N.indexOf(e.target)+1;t=N[n]||N[0];break;case d:var r=N.indexOf(e.target)-1;t=N[r]||N[N.length-1]}null==(a=t)||a.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},c)},u.map((function(e){var a=e.value,t=e.label;return n.createElement("li",{role:"tab",tabIndex:g===a?0:-1,"aria-selected":g===a,className:(0,i.Z)("tabs__item",l,{"tabs__item--active":g===a}),key:a,ref:function(e){return N.push(e)},onKeyDown:j,onFocus:w,onClick:w},t)}))),a?(0,n.cloneElement)(y.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},y.map((function(e,a){return(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==g})}))))}},9443:function(e,a,t){"use strict";var n=(0,t(7294).createContext)(void 0);a.Z=n},944:function(e,a,t){"use strict";var n=t(7294),r=t(9443);a.Z=function(){var e=(0,n.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},1281:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var n=t(2122),r=t(9756),i=(t(7294),t(3905)),l=t(1395),o=t(8215),d={title:"Publishing Android Components",tags:"tutorial",sidebar_label:"Android Components",sidebar_position:6},s=void 0,p={unversionedId:"tutorials/android",id:"tutorials/android",isDocsHomePage:!1,title:"Publishing Android Components",description:"In this tutorial, we are going to publish the Android AAR library to Maven Central.",source:"@site/docs/tutorials/android.mdx",sourceDirName:"tutorials",slug:"/tutorials/android",permalink:"/jarbird/docs/tutorials/android",editUrl:"https://github.com/hkhc/jarbird-docs/docs/tutorials/android.mdx",version:"current",sidebarPosition:6,frontMatter:{title:"Publishing Android Components",tags:"tutorial",sidebar_label:"Android Components",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Custom Maven repository",permalink:"/jarbird/docs/tutorials/custommaven"},next:{title:"Custom Artifactory repository",permalink:"/jarbird/docs/tutorials/artifactory"}},u=[{value:"pom.yaml",id:"pomyaml",children:[]},{value:"build.gradle",id:"buildgradle",children:[]},{value:"Run It",id:"run-it",children:[]},{value:"Variant with artifactId",id:"variant-with-artifactid",children:[]},{value:'Variant with POM <a href="#variajnt"></a>',id:"variant-with-pom",children:[]}],m={toc:u};function c(e){var a=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this tutorial, we are going to publish the Android AAR library to Maven Central."),(0,i.kt)("p",null,"The sample project is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hkhc/jarbird-samples/tree/master/android"},"here"),"."),(0,i.kt)("p",null,"Unlike publishing  conventional JAR libraries, we need to take care of the ",(0,i.kt)("strong",{parentName:"p"},"Build Types"),", ",(0,i.kt)("strong",{parentName:"p"},"Flavors"),", and ",(0,i.kt)("strong",{parentName:"p"},"Variants")," of Android library projects."),(0,i.kt)("p",null,"A variant is a combination of a build type and a flavour, so that it may refer to a combination of source set, resources, etc. For example, a typical Android project may have build types ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"release"),", and flavours for ",(0,i.kt)("inlineCode",{parentName:"p"},"qa")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"production"),". Then we have four different variants:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qaDebug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qaRelease")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"productionDebug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"productionRelease"))),(0,i.kt)("p",null,"(We could ignore some combinations that do not make sense for a particular project, please refer to ",(0,i.kt)("inlineCode",{parentName:"p"},"variantFilter")," in ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/studio/build/build-variants"},"Android documentation")," for details)"),(0,i.kt)("p",null,"Each of the variants creates a different library and can be published (or not to be published) individually. Jarbird plugin supports configure how each of these components is published."),(0,i.kt)("p",null,"The source code of this tutorial is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"android")," directory."),(0,i.kt)("h3",{id:"pomyaml"},"pom.yaml"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," file is not that different from conventional JAR publishing. The only difference right now is the ",(0,i.kt)("inlineCode",{parentName:"p"},"packaging")," line."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pom.yaml" {4}',title:'"pom.yaml"',"{4}":!0},"group: jarbirdsamples\nartifactId: simpleaar\nversion: 1.0\npackaging: aar\n\nlicenses:\n  - name: Apache-2.0\n    dist: repo\n\ndevelopers:\n  - id: demo\n    name: Jarbird Demo\n    email: jarbird.demo@fake-email.com\n\nscm:\n  repoType: github.com\n  repoName: demo/jarbird-samples/android\n")),(0,i.kt)("h3",{id:"buildgradle"},"build.gradle"),(0,i.kt)("p",null,"We have a different plugin ID for Android project:"),(0,i.kt)(l.Z,{defaultValue:"buildgradle-1",values:[{label:"build.gradle",value:"buildgradle-1"},{label:"build.gradle.kts",value:"buildgradlekts"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"buildgradle-1",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"{4}","{4}":!0},"plugins {\n    id 'com.android.library'\n    id 'kotlin-android'\n    id 'io.hkhc.jarbird-android' version \"0.7.0\"\n}\n"))),(0,i.kt)(o.Z,{value:"buildgradlekts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{4}","{4}":!0},'plugins {\n    id("com.android.library")\n    id("kotlin-android")\n    id("io.hkhc.jarbird-android") version "0.7.0"\n}\n')))),(0,i.kt)("p",null,"There is no new syntax and functions in the plugin ",(0,i.kt)("inlineCode",{parentName:"p"},"io.hkhc.jarbird-android"),". It just has the additional capability to recognize Android ",(0,i.kt)("inlineCode",{parentName:"p"},"LibraryVariant")," objects. It does not hurt to use this plugin on conventional JAR projects. Just looks confusing."),(0,i.kt)("p",null,"The build script of typical Android library projects has an android block to configure the build types and flavours. We add our code after the ",(0,i.kt)("inlineCode",{parentName:"p"},"android")," block to specify how they are published, in the Jarbird way."),(0,i.kt)(l.Z,{defaultValue:"buildgradle-2",values:[{label:"build.gradle",value:"buildgradle-2"},{label:"build.gradle.kts",value:"buildgradlekts-1"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"buildgradle-2",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"{4,8}","{4,8}":!0},"// after android {}\nandroid.libraryVariants.configureEach { variant ->\n    jarbird {\n        pub(variant.name) {\n            mavenCentral()\n            from(variant)\n        }\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"buildgradlekts-1",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{4,8}","{4,8}":!0},"// after android {}\nandroid.libraryVariants.configureEach {\n    jarbird {\n        pub(name) {\n            mavenCentral()\n            from(this@configureEach)\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"Note how Kotlin and Groovy differ in getting the proper reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"from()")," method. Because of the ",(0,i.kt)("inlineCode",{parentName:"p"},"configureEach")," loop, we created two ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),"s, one for each variant, and the results are two sets of artefacts."),(0,i.kt)("p",null,"There are two things in the ",(0,i.kt)("inlineCode",{parentName:"p"},"jarbird")," block that differs from our previous tutorials. First the additional ",(0,i.kt)("inlineCode",{parentName:"p"},"from()")," block that we have mentioned. When building conventional JAR libraries, we normally don't need to specify where the source code comes from. The plugin will figure it out by itself. When publishing Android AAR components, we need to tell what to publish by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"LibraryVariant")," reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"from()")," method. Without ",(0,i.kt)("inlineCode",{parentName:"p"},"from()")," the publishing will fail."),(0,i.kt)("p",null,"The other thing to notice is that we provided a name to ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),". It is used to identify them when there are multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),". It could be any string as long as it is unique among ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),"s. Conventionally we use the variant name of the Android project. The name helps the Jarbird plugin to link pub to particular ",(0,i.kt)("a",{parentName:"p",href:"#variant"},"variant of POM")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml"),"."),(0,i.kt)("p",null,"Normally Android library has at least two build types, ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"release"),"."),(0,i.kt)("h2",{id:"run-it"},"Run It"),(0,i.kt)("p",null,"Executing ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew jbPublishToMavenLocal")," we get two publications:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar/1.0-release")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar/1.0-debug"))),(0,i.kt)("p",null,"The artifacts will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"ls -1 ~/.m2/repository/jarbirdsamples/simpleaar/1.0-release\nsimpleaar-1.0-release-javadoc.jar\nsimpleaar-1.0-release-javadoc.jar.asc\nsimpleaar-1.0-release-sources.jar\nsimpleaar-1.0-release-sources.jar.asc\nsimpleaar-1.0-release.aar\nsimpleaar-1.0-release.aar.asc\nsimpleaar-1.0-release.module\nsimpleaar-1.0-release.module.asc\nsimpleaar-1.0-release.pom\nsimpleaar-1.0-release.pom.asc\n")),(0,i.kt)("p",null,"This is the default way to distinguish different publications, that the version is suffixed by the variant. However, we can change that."),(0,i.kt)("h2",{id:"variant-with-artifactid"},"Variant with artifactId"),(0,i.kt)("p",null,"We may make the variant part of the artifactId. We add one line to the Jarbird configuration:"),(0,i.kt)(l.Z,{defaultValue:"buildgradle-3",values:[{label:"build.gradle",value:"buildgradle-3"},{label:"build.gradle.kts",value:"buildgradlekts-2"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"buildgradle-3",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"{6}","{6}":!0},"android.libraryVariants.configureEach { variant ->\n    jarbird {\n        pub(variant.name) {\n            mavenCentral()\n            variantWithArtifactId()\n            from(variant)\n        }\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"buildgradlekts-2",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{6}","{6}":!0},"android.libraryVariants.configureEach {\n    jarbird {\n        pub(name) {\n            mavenCentral()\n            variantWithArtifactId()\n            from(this@configureEach)\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"The additional line indicates the artifactId shall be suffixed by the variant. After executing ",(0,i.kt)("inlineCode",{parentName:"p"},"jbPublishToMavenLocal"),", we get two publications with directories like this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-release/1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-debug/1.0"))),(0,i.kt)("p",null,"We could have even greater control to the coordinate of components by specifying variant in ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")),(0,i.kt)("h2",{id:"variant-with-pom"},"Variant with POM ",(0,i.kt)("a",{href:"#variajnt"})),(0,i.kt)("p",null,"We may customize the POM information for each variant in ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml"),". There are two ways to do so. In this tutorial, we will focus on one method first."),(0,i.kt)("p",null,"Let's change the ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pom.yaml" {1-6}',title:'"pom.yaml"',"{1-6}":!0},"variant: debug\nartifactId: simpleaar-staging\n---\nvariant: release\nartifactId: simpleaar-production\n---\ngroup: jarbirdsamples\nversion: 1.0\npackaging: aar\n\nlicenses:\n  - name: Apache-2.0\n    dist: repo\n\ndevelopers:\n  - id: demo\n    name: Jarbird Demo\n    email: jarbird.demo@fake-email.com\n\nscm:\n  repoType: github.com\n  repoName: demo/jarbird-samples/android\n")),(0,i.kt)("p",null,"Now our ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," has three sections, two of them have a ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," attribute. When publishing components, the Jarbird plugin ",(0,i.kt)("strong",{parentName:"p"},"combine the section in ",(0,i.kt)("inlineCode",{parentName:"strong"},"pom.yaml")," with the ",(0,i.kt)("inlineCode",{parentName:"strong"},"variant")," attribute and the section without ",(0,i.kt)("inlineCode",{parentName:"strong"},"variant"),".")," Therefore effectively we have different ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," for each of the variants."),(0,i.kt)("p",null,"Then we add a line to the ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle")," file."),(0,i.kt)(l.Z,{defaultValue:"buildgradle-4",values:[{label:"build.gradle",value:"buildgradle-4"},{label:"build.gradle.kts",value:"buildgradlekts-3"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"buildgradle-4",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"{6}","{6}":!0},"android.libraryVariants.configureEach { variant ->\n    jarbird {\n        pub(variant.name) {\n            mavenCentral()\n            variantInvisible()\n            from(variant)\n        }\n    }\n}\n"))),(0,i.kt)(o.Z,{value:"buildgradlekts-3",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{6}","{6}":!0},"android.libraryVariants.configureEach {\n    jarbird {\n        pub(name) {\n            mavenCentral()\n            variantInvisible()\n            from(this@configureEach)\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"The line ",(0,i.kt)("inlineCode",{parentName:"p"},"variantInvisible()")," tell Jarbird plugin not to merge the variant name. So the information of components we built is entirely on ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml"),"."),(0,i.kt)("p",null,"Executing ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew jbPublishToMavenLocal")," and we will get the following in Maven Local repository:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-production/1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-staging/1.0"))),(0,i.kt)("p",null,"The artifacts of the release variant look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ls -1 ~/.m2/repository/jarbirdsamples/simpleaar-production/1.0\nsimpleaar-production-1.0-javadoc.jar\nsimpleaar-production-1.0-javadoc.jar.asc\nsimpleaar-production-1.0-sources.jar\nsimpleaar-production-1.0-sources.jar.asc\nsimpleaar-production-1.0.aar\nsimpleaar-production-1.0.aar.asc\nsimpleaar-production-1.0.module\nsimpleaar-production-1.0.module.asc\nsimpleaar-production-1.0.pom\nsimpleaar-production-1.0.pom.asc\n")))}c.isMDXComponent=!0},6010:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}function r(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}t.d(a,{Z:function(){return r}})}}]);