(self.webpackChunkjarbird_docs=self.webpackChunkjarbird_docs||[]).push([[406],{3905:function(e,n,a){"use strict";a.d(n,{Zo:function(){return p},kt:function(){return c}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),d=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(a),c=r,b=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return a?t.createElement(b,o(o({ref:n},p),{},{components:a})):t.createElement(b,o({ref:n},p))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8215:function(e,n,a){"use strict";var t=a(7294);n.Z=function(e){var n=e.children,a=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",hidden:a,className:r},n)}},1395:function(e,n,a){"use strict";a.d(n,{Z:function(){return p}});var t=a(7294),r=a(944),i=a(6010),o="tabItem_1uMI",l="tabItemActive_2DSg";var s=37,d=39;var p=function(e){var n=e.lazy,a=e.block,p=e.defaultValue,u=e.values,m=e.groupId,c=e.className,b=(0,r.Z)(),h=b.tabGroupChoices,f=b.setTabGroupChoices,g=(0,t.useState)(p),k=g[0],v=g[1],y=t.Children.toArray(e.children),N=[];if(null!=m){var w=h[m];null!=w&&w!==k&&u.some((function(e){return e.value===w}))&&v(w)}var C=function(e){var n=e.currentTarget,a=N.indexOf(n),t=u[a].value;v(t),null!=m&&(f(m,t),setTimeout((function(){var e,a,t,r,i,o,s,d;(e=n.getBoundingClientRect(),a=e.top,t=e.left,r=e.bottom,i=e.right,o=window,s=o.innerHeight,d=o.innerWidth,a>=0&&i<=d&&r<=s&&t>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(l),setTimeout((function(){return n.classList.remove(l)}),2e3))}),150))},j=function(e){var n,a;switch(e.keyCode){case d:var t=N.indexOf(e.target)+1;a=N[t]||N[0];break;case s:var r=N.indexOf(e.target)-1;a=N[r]||N[N.length-1]}null==(n=a)||n.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},c)},u.map((function(e){var n=e.value,a=e.label;return t.createElement("li",{role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,className:(0,i.Z)("tabs__item",o,{"tabs__item--active":k===n}),key:n,ref:function(e){return N.push(e)},onKeyDown:j,onFocus:C,onClick:C},a)}))),n?(0,t.cloneElement)(y.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},y.map((function(e,n){return(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==k})}))))}},9443:function(e,n,a){"use strict";var t=(0,a(7294).createContext)(void 0);n.Z=t},944:function(e,n,a){"use strict";var t=a(7294),r=a(9443);n.Z=function(){var e=(0,t.useContext)(r.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},1281:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var t=a(2122),r=a(9756),i=(a(7294),a(3905)),o=a(1395),l=a(8215),s={title:"Publishing Android Components",tags:"tutorial",sidebar_label:"Android Components",sidebar_position:5},d={unversionedId:"tutorials/android",id:"tutorials/android",isDocsHomePage:!1,title:"Publishing Android Components",description:"In this tutorial, we are going to publish Android AAR library to Maven Central.",source:"@site/docs/tutorials/android.mdx",sourceDirName:"tutorials",slug:"/tutorials/android",permalink:"/jarbird/docs/tutorials/android",editUrl:"https://github.com/hkhc/jarbird-docs/docs/tutorials/android.mdx",version:"current",sidebar_label:"Android Components",sidebarPosition:5,frontMatter:{title:"Publishing Android Components",tags:"tutorial",sidebar_label:"Android Components",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Publish to Maven Central",permalink:"/jarbird/docs/tutorials/mavencentral"},next:{title:"Publishing Gradle Plugin",permalink:"/jarbird/docs/tutorials/gradleplugin"}},p=[{value:"pom.yaml",id:"pomyaml",children:[]},{value:"build.gradle",id:"buildgradle",children:[]},{value:"Run It",id:"run-it",children:[]},{value:"Variant with artifactId",id:"variant-with-artifactid",children:[]},{value:"Variant with POM",id:"variant-with-pom",children:[]}],u={toc:p};function m(e){var n=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this tutorial, we are going to publish Android AAR library to Maven Central."),(0,i.kt)("p",null,"The sample project is ","[here]","(",(0,i.kt)("a",{parentName:"p",href:"https://github."},"https://github."),"\ncom/hkhc/jarbird-samples/tree/master/android)."),(0,i.kt)("p",null,"Unlike publishing  conventional JAR libraries, we need to take care of the\n",(0,i.kt)("strong",{parentName:"p"},"Build Types"),", ",(0,i.kt)("strong",{parentName:"p"},"Flavors"),", and ",(0,i.kt)("strong",{parentName:"p"},"Variants")," of Android library projects."),(0,i.kt)("p",null,"A variant is a combination of a build type and a flavor, so that it may refer\nto a combination of source set, resources, etc. For example, a typical Android project\nmay have build types ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"release"),", and flavors for ",(0,i.kt)("inlineCode",{parentName:"p"},"qa")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"production"),". Then we have four different variants:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qaDebug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qaRelease")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"productionDebug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"productionRelease"))),(0,i.kt)("p",null,"(We could ignore some combinations that do not make sense for particular\nproject, please refer to ",(0,i.kt)("inlineCode",{parentName:"p"},"variantFilter")," in ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/studio/build/build-variants"},"Android documentation")," for details)"),(0,i.kt)("p",null,"Each of the variants creates a different library and can be published\n(or not to be published) individually. Jarbird plugin supports configure\nhow each of these components is published."),(0,i.kt)("p",null,"The source code of this tutorial is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"android")," directory."),(0,i.kt)("h3",{id:"pomyaml"},"pom.yaml"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," file is not that different from conventional JAR publishing.\nThe only difference right now is the ",(0,i.kt)("inlineCode",{parentName:"p"},"packaging")," line."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pom.yaml" {4}',title:'"pom.yaml"',"{4}":!0},"group: jarbirdsamples\nartifactId: simpleaar\nversion: 1.0\npackaging: aar\n\nlicenses:\n  - name: Apache-2.0\n    dist: repo\n\ndevelopers:\n  - id: demo\n    name: Jarbird Demo\n    email: jarbird.demo@fake-email.com\n\nscm:\n  repoType: github.com\n  repoName: demo/jarbird-samples/android\n")),(0,i.kt)("h3",{id:"buildgradle"},"build.gradle"),(0,i.kt)("p",null,"We have a different plugin ID for Android project:"),(0,i.kt)(o.Z,{defaultValue:"groovy",values:[{label:"Groovy",value:"groovy"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle" {4}',title:'"build.gradle"',"{4}":!0},"plugins {\n    id 'com.android.library'\n    id 'kotlin-android'\n    id 'io.hkhc.jarbird-android' version \"0.5.2\"\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts" {4}',title:'"build.gradle.kts"',"{4}":!0},'plugins {\n    id("com.android.library")\n    id("kotlin-android")\n    id("io.hkhc.jarbird-android") version "0.5.2"\n}\n')))),(0,i.kt)("p",null,"There is no new syntax and functions in the plugin ",(0,i.kt)("inlineCode",{parentName:"p"},"io.hkhc.jarbird-android"),".\nIt just has additional capability to recognize Android ",(0,i.kt)("inlineCode",{parentName:"p"},"LibraryVariant")," objects.\nIt does not hurt to use this plugin on conventional JAR projects. Just looks confusing."),(0,i.kt)("p",null,"The build script of typical Android library projects has an android block\nto configure the build types and flavors. We add our code after the\n",(0,i.kt)("inlineCode",{parentName:"p"},"android")," block to specify how they are published, in the Jarbird way."),(0,i.kt)(o.Z,{defaultValue:"groovy-1",values:[{label:"Groovy",value:"groovy-1"},{label:"Kotlin",value:"kotlin-1"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"groovy-1",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle" {4,8}',title:'"build.gradle"',"{4,8}":!0},"// after android {}\nandroid.libraryVariants.configureEach { variant ->\n    jarbird {\n        pub(variant.name) {\n            mavenLocal()\n            mavenCentral()\n            useGpg = true\n            from(variant)\n        }\n    }\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin-1",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts" {4,8}',title:'"build.gradle.kts"',"{4,8}":!0},"// after android {}\nandroid.libraryVariants.configureEach {\n    jarbird {\n        pub(name) {\n            mavenLocal()\n            mavenCentral()\n            useGpg = true\n            from(this@configureEach)\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"Note how Kotlin and Groovy differ in getting the proper reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"from()"),"\nmethod. Because of the ",(0,i.kt)("inlineCode",{parentName:"p"},"configureEach")," loop, we created two ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),"s, one for\neach variant, and the results are two sets of artefacts."),(0,i.kt)("p",null,'There are two things in the "jarbird" block that differs from our previous tutorials.\nFirst the additional ',(0,i.kt)("inlineCode",{parentName:"p"},"from()")," block that we have mentioned. When building\nconventional JAR libraries, we normally don't need to specify where the source\ncode comes from. The plugin will figure it out by itself. When publishing Android\nAAR components, we need to tell what to publish by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"LibraryVariant"),"\nreference to ",(0,i.kt)("inlineCode",{parentName:"p"},"from()")," method."),(0,i.kt)("p",null,"The other thing to notice is that we provided a name to ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),".\nIt is used to identify them when there are multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),".\nIt could be any string as long as it is unique among ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),"s. Conventionally we\nuse the variant name of the Android project."),(0,i.kt)("p",null,"Normally Android library has at least two build types, ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"release"),"."),(0,i.kt)("h2",{id:"run-it"},"Run It"),(0,i.kt)("p",null,"Executing ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew jbPublishToMavenLocal")," we get two publications:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar/1.0-release")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar/1.0-debug"))),(0,i.kt)("p",null,"The artifacts will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"ls -1 ~/.m2/repository/jarbirdsamples/simpleaar/1.0-release\nsimpleaar-1.0-release-javadoc.jar\nsimpleaar-1.0-release-javadoc.jar.asc\nsimpleaar-1.0-release-sources.jar\nsimpleaar-1.0-release-sources.jar.asc\nsimpleaar-1.0-release.aar\nsimpleaar-1.0-release.aar.asc\nsimpleaar-1.0-release.module\nsimpleaar-1.0-release.module.asc\nsimpleaar-1.0-release.pom\nsimpleaar-1.0-release.pom.asc\n")),(0,i.kt)("p",null,"This is the default way to distinguish different publications, that the version\nis suffixed by the variant. However, we can change that."),(0,i.kt)("h2",{id:"variant-with-artifactid"},"Variant with artifactId"),(0,i.kt)("p",null,"We may make the variant part of the artifactId. We add one line to the Jarbird configuration:"),(0,i.kt)(o.Z,{defaultValue:"groovy-2",values:[{label:"Groovy",value:"groovy-2"},{label:"Kotlin",value:"kotlin-2"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"groovy-2",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle" {6}',title:'"build.gradle"',"{6}":!0},"android.libraryVariants.configureEach { variant ->\n    jarbird {\n        pub(variant.name) {\n            mavenLocal()\n            mavenCentral()\n            variantWithArtifactId()\n            useGpg = true\n            from(variant)\n        }\n    }\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin-2",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts" {6}',title:'"build.gradle.kts"',"{6}":!0},"android.libraryVariants.configureEach {\n    jarbird {\n        pub(name) {\n            mavenLocal()\n            mavenCentral()\n            variantWithArtifactId()\n            useGpg = true\n            from(this@configureEach)\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"The additional line indicates the artifactId shall be suffixed by the variant.\nAfter executing ",(0,i.kt)("inlineCode",{parentName:"p"},"jbPublishToMavenLocal"),", we get two publications with\ndirectories like this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-release/1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-debug/1.0"))),(0,i.kt)("p",null,"We could have even greater control to the coordinate of components by specifying variant in ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")),(0,i.kt)("h2",{id:"variant-with-pom"},"Variant with POM"),(0,i.kt)("p",null,"We may customize the POM information for each variant in ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml"),". There\nare two ways to do so. In this tutorial, we will focus on the one method first."),(0,i.kt)("p",null,"Let's change the ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pom.yaml" {1-6}',title:'"pom.yaml"',"{1-6}":!0},"variant: debug\nartifactId: simpleaar-staging\n---\nvariant: release\nartifactId: simpleaar-production\n---\ngroup: jarbirdsamples\nversion: 1.0\npackaging: aar\n\nlicenses:\n  - name: Apache-2.0\n    dist: repo\n\ndevelopers:\n  - id: demo\n    name: Jarbird Demo\n    email: jarbird.demo@fake-email.com\n\nscm:\n  repoType: github.com\n  repoName: demo/jarbird-samples/android\n")),(0,i.kt)("p",null,"Now our ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," has three sections, two of them have a ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," attribute.\nWhen publishing components, Jarbird plugin ",(0,i.kt)("strong",{parentName:"p"},"combine the section in ",(0,i.kt)("inlineCode",{parentName:"strong"},"pom.yaml"),"\nwith ",(0,i.kt)("inlineCode",{parentName:"strong"},"variant")," attribute and the section without ",(0,i.kt)("inlineCode",{parentName:"strong"},"variant"),".")," Therefore\neffectively we have different ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," for each of the variants."),(0,i.kt)("p",null,"Then we add a line to the ",(0,i.kt)("inlineCode",{parentName:"p"},"build.gradle")," file."),(0,i.kt)(o.Z,{defaultValue:"groovy-3",values:[{label:"Groovy",value:"groovy-3"},{label:"Kotlin",value:"kotlin-3"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"groovy-3",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="build.gradle" {6}',title:'"build.gradle"',"{6}":!0},"android.libraryVariants.configureEach { variant ->\n    jarbird {\n        pub(variant.name) {\n            mavenLocal()\n            mavenCentral()\n            variantInvisible()\n            useGpg = true\n            from(variant)\n        }\n    }\n}\n"))),(0,i.kt)(l.Z,{value:"kotlin-3",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="build.gradle.kts" {6}',title:'"build.gradle.kts"',"{6}":!0},"android.libraryVariants.configureEach {\n    jarbird {\n        pub(name) {\n            mavenLocal()\n            mavenCentral()\n            variantInvisible()\n            useGpg = true\n            from(this@configureEach)\n        }\n    }\n}\n")))),(0,i.kt)("p",null,"The line ",(0,i.kt)("inlineCode",{parentName:"p"},"variantInvisible()")," tell Jarbird plugin not to merge the variant name.\nSo the information of components we built is entirely on ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml"),"."),(0,i.kt)("p",null,"Executing ",(0,i.kt)("inlineCode",{parentName:"p"},"./gradlew jbPublishToMavenLocal")," and we will get the following in\nMaven Local repository:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-production/1.0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"~/.m2/repository/jarbirdsamples/simpleaar-staging/1.0"))),(0,i.kt)("p",null,"The artifacts of the release variant look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"$ ls -1 ~/.m2/repository/jarbirdsamples/simpleaar-production/1.0\nsimpleaar-production-1.0-javadoc.jar\nsimpleaar-production-1.0-javadoc.jar.asc\nsimpleaar-production-1.0-sources.jar\nsimpleaar-production-1.0-sources.jar.asc\nsimpleaar-production-1.0.aar\nsimpleaar-production-1.0.aar.asc\nsimpleaar-production-1.0.module\nsimpleaar-production-1.0.module.asc\nsimpleaar-production-1.0.pom\nsimpleaar-production-1.0.pom.asc\n")))}m.isMDXComponent=!0},6010:function(e,n,a){"use strict";function t(e){var n,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(a=t(e[n]))&&(r&&(r+=" "),r+=a);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(n=t(e))&&(r&&(r+=" "),r+=n);return r}a.d(n,{Z:function(){return r}})}}]);