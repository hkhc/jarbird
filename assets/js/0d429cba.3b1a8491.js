(self.webpackChunkjarbird_docs=self.webpackChunkjarbird_docs||[]).push([[0],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(t),d=r,f=u["".concat(p,".").concat(d)]||u[d]||s[d]||i;return t?a.createElement(f,l(l({ref:n},c),{},{components:t})):a.createElement(f,l({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5712:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p},default:function(){return c}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),l={title:"POM",tags:"main",sidebar_position:4},o={unversionedId:"reference/pom",id:"reference/pom",isDocsHomePage:!1,title:"POM",description:"Jarbird plugin basically get all detail information it needs for publishing",source:"@site/docs/reference/pom.md",sourceDirName:"reference",slug:"/reference/pom",permalink:"/jarbird/docs/reference/pom",editUrl:"https://github.com/hkhc/jarbird-docs/docs/reference/pom.md",version:"current",sidebarPosition:4,frontMatter:{title:"POM",tags:"main",sidebar_position:4},sidebar:"referenceSidebar",previous:{title:"Core Concepts",permalink:"/jarbird/docs/reference/concepts"},next:{title:"pom.yaml Reference",permalink:"/jarbird/docs/reference/pom-reference"}},p=[{value:"POM file format",id:"pom-file-format",children:[]},{value:"POM file location and Merging POM files",id:"pom-file-location-and-merging-pom-files",children:[]},{value:'POM variant <a href="#variant"/>',id:"pom-variant",children:[]},{value:"Merging multiple POM files with variants",id:"merging-multiple-pom-files-with-variants",children:[]},{value:"POM Reference",id:"pom-reference",children:[]},{value:"pub",id:"pub",children:[]}],m={toc:p};function c(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Jarbird plugin basically get all detail information it needs for publishing\nfrom our POM file. Instead of the Maven standard POM file, we specify our\nPOM information in our own YAML format. It is more human friendly and easier\nto reuse data among different publication."),(0,i.kt)("p",null,"The Jarbird plugin work without the POM file. Like conventional component\npublishing, the build script and Jarbird plugin can figure minimal information\nfrom the project. But it is more flexible and understandable to put POM\ninformation in the YAML POM file."),(0,i.kt)("h2",{id:"pom-file-format"},"POM file format"),(0,i.kt)("p",null,"A complete ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," look like this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pom.yaml"',title:'"pom.yaml"'},"group: myGroup\nartifactId: myLib\nversion: 1.0.0\npackaging: jar\n\nlicenses:\n- name: Apache-2.0\n  dist: repo\n\ndevelopers:\n- id: name-id\n  name: My name\n  email: my-email@email.com\n\nscm:\n    repoType: github.com\n    repoName: path-to-repo\n    \n# For publishing Gradle plugin only\nplugin:\n  id: myplugin.id\n  displayName: My Gradle plugin\n  implementationClass: myGroup.myLib.myPlugin\n  tags:\n  - publish\n\n")),(0,i.kt)("p",null,"It shall be a valid ",(0,i.kt)("a",{parentName:"p",href:"https://yaml.org/spec/1.2/spec.html"},"YAML")," file. It can be validated by online service like ",(0,i.kt)("a",{parentName:"p",href:"http://www.yamllint.com/"},"this"),"."),(0,i.kt)("p",null,"We can omit most of the information above as long as the remote repositories\nallow. If ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," file is totally omitted. The plugin deduces the\nfollowing information from project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"artifactId")," : The project name. It is the directory of the project, but\ncan be overrided in ",(0,i.kt)("inlineCode",{parentName:"li"},"settings.gradle")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"settings.gradle.kts"),". ")),(0,i.kt)("h2",{id:"pom-file-location-and-merging-pom-files"},"POM file location and Merging POM files"),(0,i.kt)("p",null,"A common POM file is named ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yml"),". It is placed in the\nany of following places:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'The file specified by Gradle property "pomFile". The property can be\nspecified by ',(0,i.kt)("inlineCode",{parentName:"li"},"-P"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"--project-prop")," option in Gradle command line."),(0,i.kt)("li",{parentName:"ul"},"sub-project directories."),(0,i.kt)("li",{parentName:"ul"},"root-project directory."),(0,i.kt)("li",{parentName:"ul"},'Gradle home directory. The default is "~/.gradle", but it can be changed\nby ',(0,i.kt)("inlineCode",{parentName:"li"},"GRADLE_USER_HOME")," environment variable.")),(0,i.kt)("p",null,"POM information in these files will be merged for specific sub-project. The\ninformation in the files is overritten accoding to the precedence from the\nabove list. That is the content in sub-projects override information in\nroot project, and so on."),(0,i.kt)("p",null,"Then we can specify shared information in root project or even ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.\ngradle/pom.yaml"),"."),(0,i.kt)("p",null,"For example, let say we have a project with the following ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="myproject/pom.yaml" {1}',title:'"myproject/pom.yaml"',"{1}":!0},"group: myAltGroup\nartifactId: myLib\nversion: 1.0.0\n")),(0,i.kt)("p",null,"And we have ",(0,i.kt)("inlineCode",{parentName:"p"},"./.gradle/pom.yaml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="~/.gradle/pom.yaml" {1}',title:'"~/.gradle/pom.yaml"',"{1}":!0},"group: myGroup\n\nlicenses:\n- name: Apache-2.0\n  dist: repo\n")),(0,i.kt)("p",null,"Then we have an effective POM for the project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="effective POM" {1}',title:'"effective','POM"':!0,"{1}":!0},"group: myAltGroup\nartifactId: myLib\nversion: 1.0.0\n\nlicenses:\n- name: Apache-2.0\n  dist: repo\n")),(0,i.kt)("p",null,"Note how the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"group")," is resolved."),(0,i.kt)("p",null,"When merging POM files with different set of developers, they are merged together according to their IDs. For example, let say we have a project with the following ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="myproject/pom.yaml" {5-8}',title:'"myproject/pom.yaml"',"{5-8}":!0},"group: myAltGroup\nartifactId: myLib\nversion: 1.0.0\n\ndevelopers:\n- id: dev001\n  name: John\n  email: john@email\n\n")),(0,i.kt)("p",null,"And we have ",(0,i.kt)("inlineCode",{parentName:"p"},"./.gradle/pom.yaml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="~/.gradle/pom.yaml" {3-6}',title:'"~/.gradle/pom.yaml"',"{3-6}":!0},"group: myGroup\n\ndevelopers:\n- id: dev002\n  name: Peter\n  email: peter@email\n\n")),(0,i.kt)("p",null,"Then we have an effective POM for the project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="effective POM" {5-11}',title:'"effective','POM"':!0,"{5-11}":!0},"group: myGroup\nartifactId: myLib\nversion: 1.0.0\n\ndevelopers:\n- id: dev001\n  name: John\n  email: john@email\n- id: dev002\n  name: Peter\n  email: peter@email\n")),(0,i.kt)("p",null,"Similar for licenses and contributors"),(0,i.kt)("h2",{id:"pom-variant"},"POM variant ",(0,i.kt)("a",{href:"#variant"})),(0,i.kt)("p",null,"Sometimes we may publish multiple components in one project. For example, we may create debug or release version of components in single Android project. Those multiple components may have slightly different POM details. We can specify these details with the POM variant feature."),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," we may specify multiple YAML fragments. Each of them is identified by the property ",(0,i.kt)("inlineCode",{parentName:"p"},"variant"),". Fragment without ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," is considered the default fragment."),(0,i.kt)("p",null,"For example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="pom.yaml"',title:'"pom.yaml"'},"---\nvariant: release\nartifactId: myapp\n---\nvariant: debug\nartifactId: myapp-qa\n---\ngroup: mygroup\nversion: 1.0.0\npackaging: aar\n....\n")),(0,i.kt)("p",null,"This file will be interpreted as two effective POM"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="release POM"',title:'"release','POM"':!0},"variant: release\nartifactId: myapp\ngroup: mygroup\nversion: 1.0.0\npackaging: aar\n....\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="debug POM"',title:'"debug','POM"':!0},"variant: debug\nartifactId: myapp-qa\ngroup: mygroup\nversion: 1.0.0\npackaging: aar\n....\n")),(0,i.kt)("p",null,"If default fragment is presnets, the content will be in each of the variant, and the variant specific part will override the content in default fragment. Note how ",(0,i.kt)("inlineCode",{parentName:"p"},"group"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"version"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"packaging")," appear in each of the variant of effective POM."),(0,i.kt)("h2",{id:"merging-multiple-pom-files-with-variants"},"Merging multiple POM files with variants"),(0,i.kt)("p",null,"We may even merge multiple POMs with variants. Two ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," files merge together on variant by variant basis. This means variants of the same name across different file will be merged together. For example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="~/.gradle/pom.yaml"',title:'"~/.gradle/pom.yaml"'},"---\nversion: release\ndevelopers:\n- id: dev001\n  name: John\n  email: john@email\n---\nvariant: debug\ndevelopers:\n- id: dev002\n  name: Peter\n  email: peter@email\n---\ngroup: mygroup\n....\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="myproject/pom.yaml"',title:'"myproject/pom.yaml"'},"---\nvariant: release\nartifactId: myapp\n---\nvariant: debug\nartifactId: myapp-qa\n---\nversion: 1.0.0\npackaging: aar\n....\n")),(0,i.kt)("p",null,"Then the effective POMs become:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="release POM"',title:'"release','POM"':!0},"group: mygroup\nartifactId: myapp\nversion: 1.0.0\npackaging: aar\n\ndevelopers:\n- id: dev001\n  name: John\n  email: john@email\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="debug POM"',title:'"debug','POM"':!0},"group: mygroup\nartifactId: myapp\nversion: 1.0.0\npackaging: aar\n\ndevelopers:\n- id: dev002\n  name: Peter\n  email: peter@email\n")),(0,i.kt)("h2",{id:"pom-reference"},"POM Reference"),(0,i.kt)("p",null,"Full reference of ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.yaml")," can be found ",(0,i.kt)("a",{parentName:"p",href:"pom-reference"},"here"),"."),(0,i.kt)("h2",{id:"pub"},"pub"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Concept pub",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"syntax"),(0,i.kt)("li",{parentName:"ul"},"sourceset"),(0,i.kt)("li",{parentName:"ul"},"from"))),(0,i.kt)("li",{parentName:"ul"},"Concept repo",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"syntax"),(0,i.kt)("li",{parentName:"ul"},"gradle properties"),(0,i.kt)("li",{parentName:"ul"},"environment variable"))),(0,i.kt)("li",{parentName:"ul"},"pub/repo combinations"),(0,i.kt)("li",{parentName:"ul"},"gradle.properties"),(0,i.kt)("li",{parentName:"ul"},"tasks"),(0,i.kt)("li",{parentName:"ul"},"repo specific ref",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"maven central"),(0,i.kt)("li",{parentName:"ul"},"custom maven repo"),(0,i.kt)("li",{parentName:"ul"},"gradle plugin portal"),(0,i.kt)("li",{parentName:"ul"},"maven local")))))}c.isMDXComponent=!0}}]);